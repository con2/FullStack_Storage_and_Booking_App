{
  "name": "full-stack-booking-app",
  "version": "1.1.0",
  "description": "Full-Stack Storage & Booking Application",
  "main": "index.js",
  "authors": [
    {
      "name": "Athina Kantis",
      "email": "athina.kantis@gmail.com",
      "url": "https://github.com/athinakantis"
    },
    {
      "name": "Vladimir Beliakov",
      "email": "ermegilius@gmail.com",
      "url": "https://github.com/ermegilius"
    },
    {
      "name": "Stefanie Jana",
      "email": "garschtubald@gmail.com",
      "url": "https://github.com/stabjana"
    },
    {
      "name": "Maria Aluko",
      "email": "maria.alukoo@gmail.com",
      "url": "https://github.com/maria-aluko"
    },
    {
      "name": "Jonathan Gian",
      "email": "jongian90@gmail.com",
      "url": "https://github.com/JonathanGian"
    }
  ],
  "scripts": {
    "install-all": "npm install && npm install --prefix frontend && npm install --prefix backend",
    "start": "echo 'Run frontend and backend separately!'",
    "frontend": "npm --prefix frontend run dev",
    "backend": "npm --prefix backend run start:watch",
    "dev": "concurrently \"npm run frontend\" \"npm run backend\"",
    "dev:infisical": "infisical run --env=dev -- npm run dev",
    "deploy": "echo 'Add deployment scripts here'",
    "generate:types:local": "npx supabase gen types typescript --local > common/supabase.types.ts",
    "generate:types": "npx supabase gen types typescript --project-id rcbddkhvysexkvgqpcud > common/supabase.types.ts",
    "s:link": "env-cmd -f .env.supabase.local npx supabase link",
    "s:link:prod": "npx @dotenvx/dotenvx run -f supabase/.env.production -- npx supabase link --project-ref rcbddkhvysexkvgqpcud",
    "s:link:dev": "npx @dotenvx/dotenvx run -f supabase/.env.preview -- npx supabase link --project-ref kpqrzaisoyxqillzpbms",
    "s:start": "env-cmd -f .env.supabase.local npx supabase start",
    "s:start:infisical": "infisical run --env=dev -- npx supabase start",
    "s:stop": "env-cmd -f .env.supabase.local npx supabase stop",
    "s:local:diff": "env-cmd -f .env.supabase.local npx supabase db diff --schema public",
    "s:diff:linked": "env-cmd -f .env.supabase.local npx supabase db diff --schema public --linked",
    "s:diff:linked:f": "npx supabase db diff --schema public --linked -f latest_diff",
    "s:dump": "npx supabase db dump -f supabase/schema.sql",
    "s:restart": "env-cmd -f .env.supabase.local npx supabase stop && env-cmd -f .env.supabase.local npx supabase start",
    "s:reset": "env-cmd -f .env.supabase.local npx supabase db reset",
    "s:reset:infisical": "infisical run --env=dev -- npx supabase db reset",
    "s:pull": "npx supabase db pull --schema public",
    "s:config:push:prod": "npx @dotenvx/dotenvx run -f supabase/.env.production -- npx supabase config push",
    "s:db:push:prod": "npx @dotenvx/dotenvx run -f supabase/.env.production -- npx supabase db push",
    "s:db:push:preview": "npx @dotenvx/dotenvx run -f supabase/.env.preview -- npx supabase db push",
    "s:config:push:preview": "npx @dotenvx/dotenvx run -f supabase/.env.preview -- npx supabase config push",
    "s:secrets:upload": "npx supabase secrets set --env-file supabase/.env.keys",
    "s:status": "npx supabase status",
    "s:studio": "npx supabase studio",
    "s:migration:new": "npx supabase migration new",
    "s:migration:up": "npx supabase migration up",
    "s:functions:serve": "npx supabase functions serve",
    "s:functions:deploy": "npx supabase functions deploy",

    "s:seed:main": "npx @dotenvx/dotenvx run -f .env.local -- npx supabase db dump --data-only -s auth,public -f supabase/seed.sql",
    "s:seed:dev": "npx @dotenvx/dotenvx run -f .env.supabase.local -- npx supabase db dump --data-only -s auth,public -f supabase/seed.sql",
    
    "infisical:sync:local:env": "infisical export --env=staging --format=dotenv > .env.local.recovered && echo 'âœ… Local environment synced to .env.local.recovered'",
    "infisical:sync:supabase:local": "infisical export --env=dev --format=dotenv > .env.supabase.local.recovered && echo 'âœ… Supabase local environment synced to .env.supabase.local.recovered'",
    "infisical:sync:both": "npm run infisical:sync:local:env && npm run infisical:sync:supabase:local && echo 'ðŸŽ‰ Both environment files synced! Check .env.local.recovered and .env.supabase.local.recovered'",
    "infisical:push:local:env": "infisical secrets set --file=.env.local --env=staging && echo 'âœ… Local environment (.env.local) pushed to staging'",
    "infisical:push:supabase:local": "infisical secrets set --file=.env.supabase.local --env=dev && echo 'âœ… Supabase local environment pushed to dev'",
    "infisical:push:both": "npm run infisical:push:local:env && npm run infisical:push:supabase:local && echo 'ðŸŽ‰ Both environment files pushed to Infisical!'",
    "infisical:sync:dev": "infisical export --env=dev --format=dotenv > .env.local.infisical && echo 'âœ… Dev environment synced to .env.local.infisical'",
    "infisical:sync:staging": "infisical export --env=staging --format=dotenv > .env.staging.infisical && echo 'âœ… Staging environment synced to .env.staging.infisical'",
    "infisical:sync:prod": "infisical export --env=prod --format=dotenv > .env.prod.infisical && echo 'âœ… Production environment synced to .env.prod.infisical'",
    "infisical:sync:all": "npm run infisical:sync:dev && npm run infisical:sync:staging && npm run infisical:sync:prod",
    "infisical:copy:dev": "npm run infisical:sync:dev && cp .env.local.infisical .env.local && echo 'âœ… Dev environment copied to .env.local'",
    "dev:local": "env-cmd -f .env.supabase.local concurrently \"npm run s:start\" \"npm run frontend\" \"npm run backend\"",
    "dev:live": "env-cmd -f .env.local concurrently \"npm run frontend\" \"npm run backend\"",
    "frontend:local": "env-cmd -f .env.supabase.local npm --prefix frontend run dev",
    "frontend:live": "env-cmd -f .env.local npm --prefix frontend run dev",
    "frontend:infisical": "infisical run --env=dev -- npm --prefix frontend run dev",
    "backend:local": "env-cmd -f .env.supabase.local npm --prefix backend run start:watch",
    "backend:live": "env-cmd -f .env.local npm --prefix backend run start:watch",
    "backend:infisical": "infisical run --env=dev -- npm --prefix backend run start:watch",
    "check-translation": "cd frontend && npx tsx src/scripts/check-translations.ts",
    "check-translation:strict": "cd frontend && npx tsx src/scripts/check-translations.ts strict",
    "check-translation:relaxed": "cd frontend && npx tsx src/scripts/check-translations.ts",
    "check-translation:unused": "cd frontend && npx tsx src/scripts/clean-unused-translations.ts",
    "check-translation:clean": "cd frontend && npx tsx src/scripts/clean-unused-translations.ts --confirm",
    "check-translation:create": "cd frontend && npx tsx src/scripts/create-missing-translation-modules",
    "sql:check": "npx postgrestools check supabase/migrations/ scripts/",
    "sql:check:migrations": "npx postgrestools check supabase/migrations/",
    "sql:check:scripts": "npx postgrestools check supabase/scripts",
    "sql:check:verbose": "npx postgrestools check supabase/migrations/ scripts/ --verbose",
    "sql:check:all": "npx postgrestools check **/*.sql"
  },
  "devDependencies": {
    "@postgrestools/postgrestools": "^0.11.0",
    "@supabase/supabase-js": "^2.53.0",
    "concurrently": "^9.1.2",
    "env-cmd": "^10.1.0",
    "type-fest": "^4.41.0"
  },
  "dependencies": {
    "@dotenvx/dotenvx": "^1.49.0",
    "supabase": "^2.34.3"
  }
}
